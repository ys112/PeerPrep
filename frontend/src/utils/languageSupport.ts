import { completeFromList } from "@codemirror/autocomplete";

const javaKeywords = [
  { label: "if", type: "keyword", apply: "if (condition) {\n    \n}" },
  { label: "else", type: "keyword", apply: "else {\n    \n}" },
  {
    label: "else if",
    type: "keyword",
    apply: "else if (condition) {\n    \n}",
  },
  {
    label: "for",
    type: "keyword",
    apply: "for (int i = 0; i < ; i++) {\n    \n}",
  },
  { label: "while", type: "keyword", apply: "while (condition) {\n    \n}" },
  { label: "do", type: "keyword", apply: "do {\n    \n} while (condition);" },
  {
    label: "switch",
    type: "keyword",
    apply:
      "switch (variable) {\n    case value1:\n        \n        break;\n    case value2:\n        \n        break;\n    default:\n        \n}",
  },
  { label: "case", type: "keyword", apply: "case value:\n    \n    break;" },
  { label: "default", type: "keyword" },
  { label: "break", type: "keyword" },
  { label: "continue", type: "keyword" },
  { label: "return", type: "keyword" },
  { label: "public", type: "modifier" },
  { label: "protected", type: "modifier" },
  { label: "private", type: "modifier" },
  { label: "static", type: "modifier" },
  { label: "final", type: "modifier" },
  { label: "abstract", type: "modifier" },
  { label: "synchronized", type: "modifier" },
  { label: "volatile", type: "modifier" },
  { label: "transient", type: "modifier" },
  { label: "int", type: "type" },
  { label: "long", type: "type" },
  { label: "double", type: "type" },
  { label: "float", type: "type" },
  { label: "boolean", type: "type" },
  { label: "char", type: "type" },
  { label: "byte", type: "type" },
  { label: "short", type: "type" },
  { label: "class", type: "keyword" },
  { label: "interface", type: "keyword" },
  { label: "enum", type: "keyword" },
  { label: "extends", type: "keyword" },
  { label: "implements", type: "keyword" },
  { label: "new", type: "keyword" },
  { label: "this", type: "keyword" },
  { label: "super", type: "keyword" },
  { label: "try", type: "keyword" },
  { label: "catch", type: "keyword" },
  { label: "finally", type: "keyword" },
  { label: "throw", type: "keyword" },
  { label: "throws", type: "keyword" },
  { label: "void", type: "type" },
  { label: "null", type: "constant" },
  { label: "true", type: "constant" },
  { label: "false", type: "constant" },
  { label: "instanceof", type: "keyword" },
  { label: "assert", type: "keyword" },
  { label: "package", type: "keyword" },
  { label: "import", type: "keyword" },
  { label: "native", type: "modifier" },
  { label: "strictfp", type: "modifier" },
];

const cppKeywords = [
  { label: "if", type: "keyword", apply: "if (condition) {\n    \n}" },
  { label: "else", type: "keyword", apply: "else {\n    \n}" },
  {
    label: "else if",
    type: "keyword",
    apply: "else if (condition) {\n    \n}",
  },
  {
    label: "for",
    type: "keyword",
    apply: "for (int i = 0; i < ; i++) {\n    \n}",
  },
  { label: "while", type: "keyword", apply: "while (condition) {\n    \n}" },
  { label: "do", type: "keyword", apply: "do {\n    \n} while (condition);" },
  {
    label: "switch",
    type: "keyword",
    apply:
      "switch (variable) {\n    case value1:\n        \n        break;\n    case value2:\n        \n        break;\n    default:\n        \n}",
  },
  { label: "case", type: "keyword", apply: "case value:\n    \n    break;" },
  { label: "default", type: "keyword" },
  { label: "break", type: "keyword" },
  { label: "continue", type: "keyword" },
  { label: "return", type: "keyword" },
  { label: "int", type: "type" },
  { label: "long", type: "type" },
  { label: "double", type: "type" },
  { label: "float", type: "type" },
  { label: "bool", type: "type" },
  { label: "char", type: "type" },
  { label: "void", type: "type" },
  { label: "wchar_t", type: "type" },
  { label: "short", type: "type" },
  { label: "signed", type: "modifier" },
  { label: "unsigned", type: "modifier" },
  { label: "static", type: "modifier" },
  { label: "extern", type: "modifier" },
  { label: "mutable", type: "modifier" },
  { label: "register", type: "modifier" },
  { label: "new", type: "keyword" },
  { label: "delete", type: "keyword" },
  { label: "class", type: "keyword" },
  { label: "struct", type: "keyword" },
  { label: "union", type: "keyword" },
  { label: "namespace", type: "keyword" },
  { label: "using", type: "keyword" },
  { label: "template", type: "keyword" },
  { label: "typename", type: "keyword" },
  { label: "friend", type: "keyword" },
  { label: "this", type: "keyword" },
  { label: "operator", type: "keyword" },
  { label: "virtual", type: "modifier" },
  { label: "override", type: "modifier" },
  { label: "try", type: "keyword" },
  { label: "catch", type: "keyword" },
  { label: "throw", type: "keyword" },
  { label: "noexcept", type: "modifier" },
  { label: "nullptr", type: "constant" },
  { label: "true", type: "constant" },
  { label: "false", type: "constant" },
  { label: "inline", type: "modifier" },
  { label: "const", type: "modifier" },
  { label: "volatile", type: "modifier" },
  { label: "constexpr", type: "modifier" },
  { label: "static_cast", type: "keyword" },
  { label: "dynamic_cast", type: "keyword" },
  { label: "reinterpret_cast", type: "keyword" },
  { label: "const_cast", type: "keyword" },
  { label: "sizeof", type: "keyword" },
  { label: "typeid", type: "keyword" },
  { label: "alignof", type: "keyword" },
  { label: "decltype", type: "keyword" },
  { label: "enum", type: "keyword" },
  { label: "auto", type: "keyword" },
];

export const javaAutocomplete = completeFromList(javaKeywords);

export const cppAutocomplete = completeFromList(cppKeywords);
